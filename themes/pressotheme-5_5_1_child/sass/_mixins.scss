/* Custom Sass Mixins */

// Helper to strip units from a var -- (24px == 24)
@function strip-units($number) {
  @return $number / ($number * 0 + 1);
}

/* Convert PX units to REMs and add px fallback of property.
Ex: @include rem(line-height, 25px);
*/
@mixin rem($property, $pxval, $base: $rem-base) {
	#{$property}: #{$pxval};
	#{$property}: rem-calc($pxval);
}

/* Helper to add propoerty across browser vendors */
@mixin vendorize($property, $value) {
	-webkit-#{$property}: $value;
	-moz-#{$property}: $value;
	-ms-#{$property}: $value;
	-o-#{$property}: $value;
	#{$property}: $value;
}

/* Helper to style all Link Hover/Active/Focus */
@mixin hoverActiveFocus($property, $value) {
    &:hover, &:active, &:focus {
        #{$property}: $value;
    }
}

/* Helper to return css required for left overlap browser bars */
@mixin leftBrowserBar() {
	bottom: 0;
	content: "";
	position: absolute;
	top: 0;
	width: 9999px;
	right: 100%;
}

/* Default sprite locations -- !!HEY!! Uncomment me when you are ready to use some sprites :) */
//$sprites 	: sprite-map("sprites_72/*.png");


/* E.G. @include get-sprite( "nav-tab", $sprites ); */
@mixin get-sprite($name, $sprites) {
	background-image: sprite-url($sprites);
	background-position: sprite-position($sprites, $name);
	background-repeat: no-repeat;
}

/* Comment out and use other mixin below to compile final css with retina */
$sprites2x	: "";
@mixin get-retina-sprites($name, $sprites, $sprites2x) {
	background-image: sprite-url($sprites);
	background-position: sprite-position($sprites, $name);
	background-repeat: no-repeat;
}


/* E.G. @include get-retina-sprites( "nav-tab", $sprites, $sprites2x ); */
/*
$sprites2x	: sprite-map("sprites_192/*.png");
@import "compass/css3/background-size";
@mixin get-retina-sprites($name, $sprites, $sprites2x) {
  background-image: sprite-url($sprites);
  background-position: sprite-position($sprites, $name);
  background-repeat: no-repeat;
  @media (-webkit-min-device-pixel-ratio: 1.5), (min--moz-device-pixel-ratio: 1.5), (-o-min-device-pixel-ratio: 3/2), (min-device-pixel-ratio: 1.5) {
    & {
      $pos: sprite-position($sprites2x, $name);
      background-image: sprite-url($sprites2x);
      background-position: nth($pos, 1) nth($pos, 2) / 2;
      @include background-size(ceil(image-width(sprite-path($sprites2x)) / 2) auto);
    }
  }
}
*/

@function relativeCalc( $value ) {
	@return $value / strip-units($base-font-size)
}

@mixin cover-background($img-uri, $background-top:"center", $background-left:"center", $background-attachment:"fixed") {
	background: url($img-uri) no-repeat unquote($background-top) unquote($background-left) unquote($background-attachment);
	-webkit-background-size: cover;
	-moz-background-size: cover;
	-o-background-size: cover;
	background-size: cover;
}

@mixin cover-background-no-url($background-top:"center", $background-left:"center", $background-attachment:"fixed") {
	background-repeat: no-repeat;
	background-position: unquote($background-top) unquote($background-left);
	background-attachment: unquote($background-attachment);
	-webkit-background-size: cover;
	-moz-background-size: cover;
	-o-background-size: cover;
	background-size: cover;
}

@mixin vertical-align($position: relative) {
	position: $position;
	top: 50%;
	-webkit-transform: translateY(-50%);
	-ms-transform: translateY(-50%);
	transform: translateY(-50%);
}

@mixin font-awesome($icon) {
	content: $icon;
	font-family: FontAwesome;
	font-weight: normal;
	font-style: normal;
	display: inline-block;
	text-decoration: inherit;
	line-height: 1;
}